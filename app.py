import streamlit as st
import aiohttp
import asyncio
import os

class OllamaService:
    def __init__(self):
        """
        Inicializa o servi√ßo usando a API da OpenAI.
        """
        api_key = os.getenv('OPENAI_API_KEY') or st.secrets.get("OPENAI_API_KEY")
        if not api_key:
            st.error("‚ö†Ô∏è Chave da API da OpenAI n√£o encontrada! Por favor, configure a vari√°vel OPENAI_API_KEY")
            st.stop()
            
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        self.base_url = "https://api.openai.com/v1/chat/completions"
    
    async def get_response(self, text: str) -> str:
        """
        Envia o texto para o modelo e recebe a an√°lise.
        """
        messages = [
            {"role": "system", "content": """Voc√™ √© Carl Gustav Jung, dialogando com um colega psic√≥logo. Como fundador da psicologia anal√≠tica, voc√™ deve:

1. Contextualiza√ß√£o Te√≥rica:
- Referenciar adequadamente seus conceitos fundamentais: inconsciente coletivo, arqu√©tipos, individua√ß√£o, sincronicidade
- Mencionar suas obras relevantes quando apropriado (ex: "Como discuti em 'Psicologia do Inconsciente'...")
- Relacionar observa√ß√µes com seus estudos sobre alquimia, mitologia e religi√µes comparadas

2. Postura Profissional:
- Manter um di√°logo entre colegas de profiss√£o, reconhecendo a forma√ß√£o e conhecimento do interlocutor
- Usar terminologia t√©cnica apropriada, sabendo que est√° falando com outro profissional da √°rea
- Fazer refer√™ncias a casos cl√≠nicos de forma √©tica e preservando identidades

3. Abordagem Anal√≠tica:
- Explorar as dimens√µes simb√≥licas e arquet√≠picas das quest√µes apresentadas
- Discutir a integra√ß√£o entre aspectos pessoais e coletivos do inconsciente
- Relacionar as quest√µes com os processos de individua√ß√£o e desenvolvimento ps√≠quico

4. Linguagem e Estilo:
- Utilizar linguagem t√©cnica apropriada para di√°logo entre profissionais
- Fazer refer√™ncias a conceitos psicanal√≠ticos e anal√≠ticos quando pertinente
- Manter o tom reflexivo e investigativo caracter√≠stico da psicologia profunda

5. Aspectos Pr√°ticos:
- Discutir implica√ß√µes pr√°ticas para o trabalho cl√≠nico
- Compartilhar insights sobre t√©cnicas terap√™uticas como amplifica√ß√£o e an√°lise de sonhos
- Abordar a import√¢ncia da an√°lise pessoal do terapeuta

Lembre-se de manter o equil√≠brio entre profundidade te√≥rica e aplicabilidade pr√°tica, reconhecendo que est√° dialogando com um colega que busca aprofundar sua compreens√£o da psicologia anal√≠tica."""},
            {"role": "user", "content": text}
        ]
        
        payload = {
            "model": "gpt-4",
            "messages": messages,
            "temperature": 0.9,
            "max_tokens": 800,
            "top_p": 0.95,
            "frequency_penalty": 0.7,
            "presence_penalty": 0.7
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.base_url, headers=self.headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data['choices'][0]['message']['content'].strip()
                    else:
                        error_text = await response.text()
                        raise Exception(f"Erro na API da OpenAI: {error_text}")
        except Exception as e:
            raise Exception(f"Falha na comunica√ß√£o com a API: {str(e)}")

def initialize_session_state():
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    if 'ollama_service' not in st.session_state:
        st.session_state.ollama_service = OllamaService()
    if 'text_input' not in st.session_state:
        st.session_state.text_input = ""

def clear_text():
    st.session_state.text_input = ""

def process_text():
    if st.session_state.text_input.strip():
        text = st.session_state.text_input
        # Add user message
        st.session_state.messages.append({
            "is_user": True,
            "content": f"üí¨ *Mensagem:*\n\n{text}"
        })
        
        # Process text
        asyncio.run(process_text_input(text))
        
        # Clear input
        clear_text()
        
        # Rerun to update chat
        st.rerun()

def display_message(is_user: bool, content: str):
    with st.chat_message("user" if is_user else "assistant"):
        st.markdown(content)

async def process_text_input(text: str):
    try:
        response = await st.session_state.ollama_service.get_response(text)
        st.session_state.messages.append({
            "is_user": False,
            "content": response
        })
    except Exception as e:
        st.error(f"Erro na an√°lise: {str(e)}")

def main():
    st.set_page_config(
        page_title="Di√°logos Junguianos",
        page_icon="üß†",
        layout="wide"
    )
    
    st.title("üí≠ Consult√≥rio do Dr. Jung - Di√°logos Profissionais")
    st.markdown("""
    ### üí¨ Dialogue com Carl Gustav Jung
    Um espa√ßo para profissionais da psicologia explorarem os conceitos e aplica√ß√µes da Psicologia Anal√≠tica.
    """)
    
    initialize_session_state()
    
    # Display chat history
    for message in st.session_state.messages:
        display_message(message["is_user"], message["content"])
    
    # Input de texto
    st.text_area(
        "Digite sua mensagem",
        key="text_input",
        height=100,
        on_change=process_text
    )
    st.button("Enviar Mensagem", on_click=process_text)
    
    # Adiciona um pouco de espa√ßo e informa√ß√µes √∫teis no final
    st.markdown("---")
    st.markdown("""
    üí° **Notas para o Di√°logo Profissional:**
    - Explore quest√µes t√©cnicas sobre a psicologia anal√≠tica
    - Discuta casos cl√≠nicos e suas interpreta√ß√µes arquet√≠picas
    - Aprofunde-se nos conceitos fundamentais da teoria junguiana
    - Relacione a teoria com a pr√°tica cl√≠nica contempor√¢nea
    """)

if __name__ == "__main__":
    main()